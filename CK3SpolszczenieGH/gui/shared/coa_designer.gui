types CoatOfArmsDesignerTypes
{
	# Reusable component for a Coat of Arms Designer
	# Requires a CoatOfArmsDesigner data context
	type vbox_coa_designer = vbox
	{
		datacontext = "[GetVariableSystem]"

		spacing = 8
		margin_left = 10

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					name = "coa_designer_center"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox_coa_designer_top_left_buttons = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding
						}
					}

					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding

						vbox = {
							layoutpolicy_vertical = expanding
							expand = {}
							vbox_coa_designer_mode_and_back = {}
						}

						expand = {}

						vbox_coa_designer_quartering_options = {}
					}
				}

				vbox_coa_designer_previews = {}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				margin_right = 10

				divider_light = {
					layoutpolicy_vertical = expanding
				}
			}

			vbox = {
				name = "coa_designer_right"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				max_width = 480

				vbox_coa_designer_tabs = {}

				widget_coa_designer_editor_panel = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}

	type vbox_coa_designer_previews = vbox
	{
		name = "coa_designer_previews"

		expand = {}

		hbox = {
			spacing = 15

			coa_preview_dynasty_huge = {
				name = "dynasty"
				datacontext = "[CoatOfArmsDesigner.GetPreviewCoA.GetCoA]"
			}

			coa_preview_house_huge = {
				name = "house"
				datacontext = "[CoatOfArmsDesigner.GetPreviewCoA.GetCoA]"
			}

			coa_preview_title_big_crown = {
				name = "title"
				datacontext = "[CoatOfArmsDesigner.GetPreviewCoA.GetCoA]"
			}

			coa_preview_realm_huge_crown = {
				name = "realm"
				datacontext = "[CoatOfArmsDesigner.GetPreviewCoA.GetCoA]"
			}
		}

		spacer = { size = { 0 10 } }

		hbox = {
			margin = { 20 10 }
			spacing = 50

			cameracontrolwidget = {
				name = "coa_designer_unit_preview"
				size = { 300 300 }

				gfxtype = game_entity_view
				effectname = "PdxGuiDefault"
				shaderfile = "gfx/FX/pdxgui_default.shader"

				camera_position = { 0 5 -12 }
				camera_look_at = { 0 5 0 }
				gfx_environment_file = "gfx/map/environment/environment_unit_preview.txt"
				camera_rotation_pitch_limits = { 0 0 }
				camera_zoom_limits = { 1.0 1.0 }
				camera_translation_limits = { 0 0 0 }

				icon = {
					name = "shadow_center"
					parentanchor = bottom|hcenter
					position = { 0 -0 }
					texture = "gfx/interface/frontend/portrait_main_menu_shadow.dds"
					size = { 200 70 }
					alpha = 0.7
				}

			}
		}

		expand = {}

	}

	type vbox_coa_designer_top_left_buttons = vbox
	{
		name = "coa_designer_top_left_buttons"
		visible = "[Not(VariableSystem.HasValue('coa_designer_page', 'start'))]"

		using = Animation_Tab_Switch

		hbox = {
			layoutpolicy_horizontal = expanding

			button_undo = {
				name = "undo_edit"
				size = { 40 40 }

				enabled = "[CoatOfArmsDesigner.CanUndoEdit]"
				onclick = "[CoatOfArmsDesigner.UndoEdit]"

				tooltip = "COA_DESIGNER_UNDO_EDIT"
				using = tooltip_se

				shortcut = "undo"
			}

			button_redo = {
				name = "redo_edit"
				size = { 40 40 }

				enabled = "[CoatOfArmsDesigner.CanRedoEdit]"
				onclick = "[CoatOfArmsDesigner.RedoEdit]"

				tooltip = "COA_DESIGNER_REDO_EDIT"
				using = tooltip_se

				shortcut = "redo"
			}

			spacer = { size = { 10 0 } }

			button_round = {
				size = { 40 40 }
				button_copy = {
					parentanchor = center
					onclick = "[CoatOfArmsDesigner.OnCopyToClipboard]"
					tooltip = "COA_DESIGNER_COPY_TO_CLIPBOARD_BUTTON_TT"
					using = tooltip_se
				}
			}

			expand = {}
		}

		expand = {}
	}

	type vbox_coa_designer_tabs = vbox
	{
		name = "coa_designer_tabs"
		visible = "[Not(VariableSystem.HasValue('coa_designer_page', 'start'))]"
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_bottom = 10

			button_tab = {
				text = "COA_DESIGNER_BACKGROUND_TAB_HEADER"
				datacontext = "[CoatOfArmsDesigner.GetBackgroundPanel]"

				onclick = "[VariableSystem.Set('coa_designer_page', 'background')]"
				onclick = "[CoatOfArmsDesignerBackgroundPanel.UpdatePatternPreviewColors]"

				down = "[VariableSystem.HasValue('coa_designer_page', 'background')]"

				using = CoatOfArmsDesignerClearEditState

				layoutpolicy_horizontal = expanding
			}

			button_tab = {
				text = "COA_DESIGNER_EMBLEM_LAYOUT_TAB_HEADER"
				visible = "[CoatOfArmsDesigner.IsCustomMode]"
				onclick = "[VariableSystem.Set('coa_designer_page', 'emblem_layout')]"
				down = "[VariableSystem.HasValue('coa_designer_page', 'emblem_layout')]"

				using = CoatOfArmsDesignerClearEditState

				layoutpolicy_horizontal = expanding
			}

			button_tab = {
				text = "COA_DESIGNER_EMBLEM_INSTANCES_TAB_HEADER"
				datacontext = "[CoatOfArmsDesigner.GetEmblemInstancesPanel]"

				enabled = "[DataModelHasItems( CoatOfArmsDesignerEmblemInstancesPanel.GetAllEmblemInstances )]"

				onclick = "[VariableSystem.Set('coa_designer_page', 'emblem_instances')]"
				onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.ResetSelectedEmblems]"
				onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.UpdateTexturePreviewColors]"

				down = "[VariableSystem.HasValue('coa_designer_page', 'emblem_instances')]"

				using = CoatOfArmsDesignerClearEditState

				layoutpolicy_horizontal = expanding
			}
		}
	}

	type vbox_coa_designer_mode_and_back = vbox
	{
		name = "coa_designer_mode_and_back"
		visible = "[Not(VariableSystem.HasValue('coa_designer_page', 'start'))]"

		spacing = 5

		text_single = {
			text = "[SelectLocalization(CoatOfArmsDesigner.IsCustomMode, 'COA_DESIGNER_MODE_CUSTOM', 'COA_DESIGNER_MODE_ADJUSTED')]"
		}

		button_standard_back = {
			onclick = "[VariableSystem.Set('coa_designer_page', 'start')]"
		}
	}

	type vbox_coa_designer_quartering_options = vbox
	{
		name = "coa_designer_quartering_options"
		visible = "[CoatOfArmsDesigner.AreQuarteringOptionsAvailable]"

		using = Animation_Tab_Switch

		spacing = 5
		margin = { 15 0 }

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			expand = {}

			button_checkbox_label = {
				size = { 35 35 }
				tooltip = "COA_DESIGNER_TOGGLE_QUARTERING_BUTTON_TT"

				onclick = "[CoatOfArmsDesigner.SetQuarteringEnabled( Not( CoatOfArmsDesigner.IsQuarteringEnabled ) )]"

				blockoverride "checkbox"
				{
					checked = "[CoatOfArmsDesigner.IsQuarteringEnabled]"
				}
				blockoverride "text"
				{
					text = "COA_DESIGNER_QUARTERING_OPTIONS"
				}

				using = tooltip_se
			}
		}
	}

	type widget_coa_designer_editor_panel = widget {
		name = "editor_panel"

		vbox_coat_designer_start_panel = {
			visible = "[VariableSystem.HasValue('coa_designer_page', 'start')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch
		}

		vbox_coa_designer_background_panel = {
			datacontext = "[CoatOfArmsDesigner.GetBackgroundPanel]"
			visible = "[VariableSystem.HasValue('coa_designer_page', 'background')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch
		}

		vbox_coa_designer_emblem_layout_panel = {
			datacontext = "[CoatOfArmsDesigner.GetEmblemLayoutPanel]"
			visible = "[VariableSystem.HasValue('coa_designer_page', 'emblem_layout')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch
		}

		vbox_coa_designer_emblem_instances_panel = {
			datacontext = "[CoatOfArmsDesigner.GetEmblemInstancesPanel]"
			visible = "[VariableSystem.HasValue('coa_designer_page', 'emblem_instances')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch
		}
	}

	type vbox_coat_designer_start_panel = vbox
	{
		name = "start_panel"

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 3

				text_label_left = {
					layoutpolicy_horizontal = expanding
					text = "COA_DESIGNER_MODE_SELECTION_HEADER"
					using = Font_Size_Medium
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				visible = "[CoatOfArmsDesigner.IsCustomMode]"

				text_multi = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 480
					text = "COA_DESIGNER_MODE_SELECTION_CONTINUE_CUSTOM_DESC"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_standard = {
						name = "button_custom_mode"
						text = "COA_DESIGNER_MODE_SELECTION_CONTINUE_CUSTOM_BUTTON"

						datacontext = "[CoatOfArmsDesigner.GetBackgroundPanel]"

						onclick = "[CoatOfArmsDesigner.OnSetCustomMode]"
						onclick = "[VariableSystem.Set('coa_designer_page', 'background')]"
						onclick = "[CoatOfArmsDesignerBackgroundPanel.UpdatePatternPreviewColors]"

						using = CoatOfArmsDesignerClearEditState
					}

					expand = {}
				}
			}

			vbox = {
				visible = "[Not(CoatOfArmsDesigner.IsCustomMode)]"
				layoutpolicy_horizontal = expanding
				spacing = 10

				text_multi = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 480
					text = "COA_DESIGNER_MODE_SELECTION_CUSTOM_DESC"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_standard = {
						name = "button_custom_mode"
						text = "COA_DESIGNER_MODE_SELECTION_CUSTOM_BUTTON"

						datacontext = "[CoatOfArmsDesigner.GetBackgroundPanel]"

						onclick = "[CoatOfArmsDesigner.OnSetCustomMode]"
						onclick = "[VariableSystem.Set('coa_designer_page', 'background')]"
						onclick = "[CoatOfArmsDesignerBackgroundPanel.UpdatePatternPreviewColors]"

						using = CoatOfArmsDesignerClearEditState
					}

					expand = {}
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 480
					text = "COA_DESIGNER_MODE_SELECTION_ADJUSTED_DESC"
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					button_standard = {
						name = "button_adjusted_mode"
						text = "COA_DESIGNER_MODE_SELECTION_ADJUSTED_BUTTON"
						onclick = "[CoatOfArmsDesigner.OnSetAdjustedMode]"
						onclick = "[VariableSystem.Set('coa_designer_page', 'background')]"
						using = CoatOfArmsDesignerClearEditState
					}

					expand = {}
				}
			}
		}

		expand = {}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 10

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				button_standard = {
					name = "randomize"
					size = { 250 33 }
					text = "COA_DESIGNER_RANDOMIZE_BUTTON"
					tooltip = "COA_DESIGNER_RANDOMIZE_BUTTON_TT"
					onclick = "[CoatOfArmsDesigner.OnRandomize]"

					using = tooltip_ws

					button_randomize = {
						using = ButtonStandardIconProperties
					}
				}
				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				button_standard = {
					name = "copy"
					size = { 250 33 }
					text = "COA_DESIGNER_COPY_TO_CLIPBOARD_BUTTON"
					tooltip = "COA_DESIGNER_COPY_TO_CLIPBOARD_BUTTON_TT"
					onclick = "[CoatOfArmsDesigner.OnCopyToClipboard]"

					using = tooltip_ws

					button_copy = {
						using = ButtonStandardIconProperties
					}
				}
				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				widget  = {
					size = { 290 33 }

					button_standard = {
						name = "paste"
						size = { 250 33 }

						text = "COA_DESIGNER_PASTE_FROM_CLIPBOARD_BUTTON"
						tooltip = "COA_DESIGNER_PASTE_FROM_CLIPBOARD_BUTTON_TT"
						enabled = "[CoatOfArmsDesigner.CanPasteFromClipboard]"
						onclick = "[CoatOfArmsDesigner.OnPasteFromClipboard]"

						using = tooltip_ws

						button_paste = {
							using = ButtonStandardIconProperties
						}
					}

					coa_preview_title_tiny = {
						name = "paste_preview"
						datacontext = "[CoatOfArmsDesigner.GetPastePreviewCoA.GetCoA]"
						visible = "[CoatOfArmsDesigner.CanPasteFromClipboard]"
						parentanchor = right
						position = { 3 -9 }
						size = { 34 34 }
					}
				}

				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				widget = {
					size = { 290 33 }

					button_standard = {
						name = "reset_to_original"
						size = { 250 33 }
						text = "COA_DESIGNER_RESET_BUTTON"
						tooltip = "COA_DESIGNER_RESET_BUTTON_TT"
						enabled = "[CoatOfArmsDesigner.WasDesignChanged]"
						onclick = "[CoatOfArmsDesigner.OnResetToLoaded]"

						using = tooltip_ws
					}

					coa_preview_title_tiny = {
						name = "reset_preview"
						datacontext = "[CoatOfArmsDesigner.GetOriginalCoASprite]"
						parentanchor = right
						position = { 3 -9 }
						size = { 34 34 }
					}
				}

				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				visible = "[CoatOfArmsDesigner.CanLoadHistoricalCoatOfArms]"

				button_standard = {
					name = "reset_to_historical"
					size = { 250 33 }
					text = "COA_DESIGNER_RESET_HISTORICAL_BUTTON"
					tooltip = "COA_DESIGNER_RESET_HISTORICAL_BUTTON_TT"
					enabled = "[Not( CoatOfArmsDesigner.WasDesignResetToHistorical )]"
					onclick = "[CoatOfArmsDesigner.OnResetToHistorical]"

					using = tooltip_ws
				}

				coa_preview_title_tiny = {
					name = "reset_preview"
					datacontext = "[CoatOfArmsDesigner.GetHistoricalCoASprite]"
					size = { 34 34 }
				}

				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				button_standard = {
					name = "save_to_disk"
					size = { 250 33 }
					text = "COA_DESIGNER_SAVE_TO_DISK"
					tooltip = "COA_DESIGNER_SAVE_TO_DISK_TT"

					# Size needs to match the size in common/coat_of_arms/options/atlases.txt for the screenshot atlas
					onclick = "[CoatOfArmsDesigner.SaveCoatOfArmsImageToDisk( '(int32)345', '(int32)345' )]"

					using = tooltip_ws

					button_copy = {
						using = ButtonStandardIconProperties
					}
				}

				expand = {}
			}
		}
	}

	# Requires CoatOfArmsDesignerBackgroundPanel data context
	type vbox_coa_designer_background_panel = vbox
	{
		name = "background_panel"

		flowcontainer = {
			name = "color_button_tabs"
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin_left = 5
			margin_bottom = 10

			button_standard = {
				name = "pattern_button"
				size = { 130 52 }

				text_single = {
					text = "COA_DESIGNER_BACKGROUND_PATTERN_HEADER"
					align = center|nobaseline
					parentanchor = center
				}

				onclick = "[VariableSystem.Clear('coa_designer_background_color')]"
				down = "[Not( VariableSystem.Exists('coa_designer_background_color') )]"
			}

			button_color_selection_tab = {
				name = "color1_button"
				visible = "[CoatOfArmsDesignerBackgroundPanel.IsColorForNumberUsed( '(int32)1' )]"

				onclick = "[VariableSystem.SetOrToggle('coa_designer_background_color', '1')]"
				down = "[VariableSystem.HasValue('coa_designer_background_color', '1')]"
				tooltip = COA_DESIGNER_COLOR1

				blockoverride "button_color"
				{
					tintcolor = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)1' )]"
				}
			}

			button_color_selection_tab = {
				name = "color2_button"
				visible = "[CoatOfArmsDesignerBackgroundPanel.IsColorForNumberUsed( '(int32)2' )]"

				onclick = "[VariableSystem.SetOrToggle('coa_designer_background_color', '2')]"
				down = "[VariableSystem.HasValue('coa_designer_background_color', '2')]"
				tooltip = COA_DESIGNER_COLOR2

				blockoverride "button_color"
				{
					tintcolor = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)2' )]"
				}
			}

			button_color_selection_tab = {
				name = "color3_button"
				visible = "[CoatOfArmsDesignerBackgroundPanel.IsColorForNumberUsed( '(int32)3' )]"

				onclick = "[VariableSystem.SetOrToggle('coa_designer_background_color', '3')]"
				down = "[VariableSystem.HasValue('coa_designer_background_color', '3')]"
				tooltip = COA_DESIGNER_COLOR3

				blockoverride "button_color"
				{
					tintcolor = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)3' )]"
				}
			}

			button_color_selection_tab = {
				name = "color4_button"
				visible = "[CoatOfArmsDesignerBackgroundPanel.IsColorForNumberUsed( '(int32)4' )]"

				onclick = "[VariableSystem.SetOrToggle('coa_designer_background_color', '4')]"
				down = "[VariableSystem.HasValue('coa_designer_background_color', '4')]"
				tooltip = COA_DESIGNER_COLOR4

				blockoverride "button_color"
				{
					tintcolor = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)4' )]"
				}
			}

			button_color_selection_tab = {
				name = "color5_button"
				visible = "[CoatOfArmsDesignerBackgroundPanel.IsColorForNumberUsed( '(int32)5' )]"

				onclick = "[VariableSystem.SetOrToggle('coa_designer_background_color', '5')]"
				down = "[VariableSystem.HasValue('coa_designer_background_color', '5')]"
				tooltip = COA_DESIGNER_COLOR5

				blockoverride "button_color"
				{
					tintcolor = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)5' )]"
				}
			}
		}

		vbox = {
			name = "color_selections"
			layoutpolicy_horizontal = expanding
			spacing = 4
			visible = "[GreaterThan_int32( CoatOfArmsDesignerBackgroundPanel.GetNumColors, '(int32)0' )]"

			vbox_coa_designer_color_selection = {
				name = "color1_selection"
				visible = "[VariableSystem.HasValue('coa_designer_background_color', '1')]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 20

				blockoverride "coa_color_picker"
				{
					color = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)1' )]"
					oncoloredited = "[CoatOfArmsDesignerBackgroundPanel.OnSelectColor( '(int32)1' )]"
					oneditingfinished = "[CoatOfArmsDesignerBackgroundPanel.OnFinishColor( '(int32)1' )]"
				}
				blockoverride "palette_item_button"
				{
					down = "[CoatOfArmsDesignerBackgroundPanel.IsColorSelected( '(int32)1', CoatOfArmsDesignerPaletteColor.GetValue )]"
					onclick = "[CoatOfArmsDesignerBackgroundPanel.OnSelectPaletteColor( '(int32)1', CoatOfArmsDesignerPaletteColor.Self )]"
				}
			}

			vbox_coa_designer_color_selection = {
				name = "color2_selection"
				visible = "[VariableSystem.HasValue('coa_designer_background_color', '2')]"
				layoutpolicy_horizontal = expanding
				margin_top = 20

				blockoverride "coa_color_picker"
				{
					color = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)2' )]"
					oncoloredited = "[CoatOfArmsDesignerBackgroundPanel.OnSelectColor( '(int32)2' )]"
					oneditingfinished = "[CoatOfArmsDesignerBackgroundPanel.OnFinishColor( '(int32)2' )]"
				}
				blockoverride "palette_item_button"
				{
					down = "[CoatOfArmsDesignerBackgroundPanel.IsColorSelected( '(int32)2', CoatOfArmsDesignerPaletteColor.GetValue )]"
					onclick = "[CoatOfArmsDesignerBackgroundPanel.OnSelectPaletteColor( '(int32)2', CoatOfArmsDesignerPaletteColor.Self )]"
				}
			}

			vbox_coa_designer_color_selection = {
				name = "color3_selection"
				visible = "[VariableSystem.HasValue('coa_designer_background_color', '3')]"
				layoutpolicy_horizontal = expanding
				margin_top = 20

				blockoverride "coa_color_picker"
				{
					color = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)3' )]"
					oncoloredited = "[CoatOfArmsDesignerBackgroundPanel.OnSelectColor( '(int32)3' )]"
					oneditingfinished = "[CoatOfArmsDesignerBackgroundPanel.OnFinishColor( '(int32)3' )]"
				}
				blockoverride "palette_item_button"
				{
					down = "[CoatOfArmsDesignerBackgroundPanel.IsColorSelected( '(int32)3', CoatOfArmsDesignerPaletteColor.GetValue )]"
					onclick = "[CoatOfArmsDesignerBackgroundPanel.OnSelectPaletteColor( '(int32)3', CoatOfArmsDesignerPaletteColor.Self )]"
				}
			}

			vbox_coa_designer_color_selection = {
				name = "color4_selection"
				visible = "[VariableSystem.HasValue('coa_designer_background_color', '4')]"
				layoutpolicy_horizontal = expanding

				blockoverride "coa_color_picker"
				{
					color = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)4' )]"
					oncoloredited = "[CoatOfArmsDesignerBackgroundPanel.OnSelectColor( '(int32)4' )]"
					oneditingfinished = "[CoatOfArmsDesignerBackgroundPanel.OnFinishColor( '(int32)4' )]"
				}
				blockoverride "palette_item_button"
				{
					down = "[CoatOfArmsDesignerBackgroundPanel.IsColorSelected( '(int32)4', CoatOfArmsDesignerPaletteColor.GetValue )]"
					onclick = "[CoatOfArmsDesignerBackgroundPanel.OnSelectPaletteColor( '(int32)4', CoatOfArmsDesignerPaletteColor.Self )]"
				}
			}

			vbox_coa_designer_color_selection = {
				name = "color5_selection"
				visible = "[VariableSystem.HasValue('coa_designer_background_color', '5')]"
				layoutpolicy_horizontal = expanding

				blockoverride "coa_color_picker"
				{
					color = "[CoatOfArmsDesignerBackgroundPanel.GetColor( '(int32)5' )]"
					oncoloredited = "[CoatOfArmsDesignerBackgroundPanel.OnSelectColor( '(int32)5' )]"
					oneditingfinished = "[CoatOfArmsDesignerBackgroundPanel.OnFinishColor( '(int32)5' )]"
				}
				blockoverride "palette_item_button"
				{
					down = "[CoatOfArmsDesignerBackgroundPanel.IsColorSelected( '(int32)5', CoatOfArmsDesignerPaletteColor.GetValue )]"
					onclick = "[CoatOfArmsDesignerBackgroundPanel.OnSelectPaletteColor( '(int32)5', CoatOfArmsDesignerPaletteColor.Self )]"
				}
			}
		}

		vbox = {
			name = "patterns"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[Not( VariableSystem.Exists('coa_designer_background_color') )]"

			background = {
				using = Background_Area
			}

			state = {
				name = _show
				on_start = "[CoatOfArmsDesignerBackgroundPanel.UpdatePatternPreviewColors]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				scrollbox = {
					name = "patterns_scrollbox"
					visible = "[CoatOfArmsDesigner.IsCustomMode]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_background" {}
					blockoverride "scrollbox_margins"
					{
						margin_left = 10
						margin_top = 10
					}

					blockoverride "scrollbox_content"
					{
						fixedgridbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							datamodel = "[CoatOfArmsDesignerBackgroundPanel.GetAllPatterns]"
							addcolumn = 92
							addrow = 92
							flipdirection = yes
							datamodel_wrap = 5

							item = {
								widget_coa_pattern_item = {}
							}
						}
					}
				}

				text_multi = {
					visible = "[Not(CoatOfArmsDesigner.IsCustomMode)]"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					align = center

					text = "COA_DESIGNER_BACKGROUND_PATTERN_DISABLED_IN_ADJUSTED_MODE"
					default_format = "#weak"
				}
			}
		}

		expand = {}
	}

	# Requires CoatOfArmsDesignerPattern datacontext
	type widget_coa_pattern_item = widget
	{
		size = { 92 92 }

		coa_preview_icon = {
			datacontext = "[CoatOfArmsDesignerPattern.GetPreviewCoA.GetCoA]"
			parentanchor = center
			size = { 84 84 }
		}

		button_standard_clean = {
			parentanchor = center
			size = { 88 88 }

			onclick = "[CoatOfArmsDesignerPattern.OnSelect]"
			down = "[CoatOfArmsDesignerPattern.IsSelected]"
			downframe = 5
			downhoverframe = 5
			downpressedframe = 5

			blockoverride "button_standard_mouseover"
			{
				visible = "[Not( CoatOfArmsDesignerPattern.IsSelected )]"
			}

			tooltip = "[CoatOfArmsDesignerPattern.GetName]"
			tooltip_visible = "[InDebugMode]"

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemLayoutPanel data context
	type vbox_coa_designer_emblem_layout_panel = vbox
	{
		name = "emblem_layout_panel"

		spacing = 5

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				scrollbox = {
					name = "emblem_layouts_scrollbox"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_background" {}

					blockoverride "scrollbox_margins"
					{
						margin_left = 10
						margin_top = 10
					}

					blockoverride "scrollbox_content"
					{
						fixedgridbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							datamodel = "[CoatOfArmsDesignerEmblemLayoutPanel.GetAllLayouts]"
							addcolumn = 92
							addrow = 92
							flipdirection = yes
							datamodel_wrap = 5

							item = {
								widget_coa_emblem_layout = {}
							}
						}
					}
				}
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemLayout datacontext
	type widget_coa_emblem_layout = widget
	{
		size = { 92 92 }

		coa_preview_icon = {
			datacontext = "[CoatOfArmsDesignerEmblemLayout.GetPreviewCoA.GetCoA]"
			parentanchor = center
			size = { 84 84 }
		}

		button_standard_clean = {
			parentanchor = center
			size = { 88 88 }

			onclick = "[CoatOfArmsDesignerEmblemLayout.OnSelect]"
			down = "[CoatOfArmsDesignerEmblemLayout.IsSelected]"
			downframe = 5
			downhoverframe = 5
			downpressedframe = 5

			blockoverride "button_standard_mouseover"
			{
				visible = "[Not( CoatOfArmsDesignerEmblemLayout.IsSelected )]"
			}

			tooltip = "[CoatOfArmsDesignerEmblemLayout.GetName]"
			tooltip_visible = "[InDebugMode]"

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemInstancesPanel data context
	type vbox_coa_designer_emblem_instances_panel = vbox
	{
		name = "emblem_instances_panel"

		vbox = {
			name = "default_emblem_instances"
			visible = "[Not( VariableSystem.Exists('coa_designer_emblem_detail_mode') )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				name = "emblem_selection"
				layoutpolicy_horizontal = expanding
				datacontext = "[CoatOfArmsDesignerEmblemInstancesPanel.AccessPagedEmblemInstanceData]"

				minimumsize = { 0 152 }

				hbox = {
					# ZMIANA
					#margin_right = 10
					margin_right = 2

					button_standard = {
						text = "COA_DESIGNER_EMBLEM_INSTANCES_ALL_BUTTON"
						#size = { 60 60 }
						size = { 68 60 }

						button_ignore = none
						onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.SetAllSelectedEmblems( '(bool)yes' )]"
						onrightclick = "[CoatOfArmsDesignerEmblemInstancesPanel.SetAllSelectedEmblems( '(bool)no' )]"

						tooltip = "COA_DESIGNER_EMBLEM_INSTANCE_SELECT_ALL"
						using = tooltip_ne
					}
				}

				hbox = {
					layoutpolicy_vertical = expanding
					margin_right = 7
					margin_left = 5

					background = {
						using = Background_Area_Dark
						alpha = 0.5
					}

					button_select_arrow = {
						size = { 20 30 }
						mirror = horizontal
						enabled = "[PagedContainerData.CanShowPreviousPage]"
						onclick = "[PagedContainerData.ShowPreviousPage]"
					}
				}

				flowcontainer = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 10 10 }

					background = {
						using = Background_Area_Dark
						alpha = 0.5
					}

					fixedgridbox = {
						name = "emblem_instances"
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding

						datamodel = "[PagedContainerData.DataModelPage( CoatOfArmsDesignerEmblemInstancesPanel.GetAllEmblemInstances )]"
						addcolumn = 66
						addrow = 66
						flipdirection = yes
						datamodel_wrap = 4 # Half of NCoatOfArmsDesigner::NUM_EMBLEM_PER_GROUP so we have two lines per page

						item = {
							widget_coa_emblem_instance = {
								blockoverride "coa_emblem_instance_size"
								{
									size = { 60 60 }
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_vertical = expanding
					margin_right = 5
					margin_left = 7

					background = {
						using = Background_Area_Dark
						alpha = 0.5
					}

					button_select_arrow = {
						size = { 20 30 }
						enabled = "[PagedContainerData.CanShowNextPage( GetDataModelSize( CoatOfArmsDesignerEmblemInstancesPanel.GetAllEmblemInstances ) )]"
						onclick = "[PagedContainerData.ShowNextPage( GetDataModelSize( CoatOfArmsDesignerEmblemInstancesPanel.GetAllEmblemInstances ) )]"
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding

						expand = {}

						button_edit_text = {
							name = "toggle_detail_edit"
							tooltip = "COA_DESIGNER_EMBLEM_INSTANCE_DETAIL_TOGGLE_TT"
							size = { 30 30 }

							visible = "[LessThan_int32( CoatOfArmsDesignerEmblemInstancesPanel.GetDetailEditIndex, '(int32)0' )]"
							onclick = "[VariableSystem.Toggle('coa_designer_emblem_detail_mode')]"
							checked = "[VariableSystem.Exists('coa_designer_emblem_detail_mode')]"
						}
					}

					expand = {}

					text_single = {
						text = COA_DESIGNER_EMBLEM_INSTANCES_PAGE
						min_width = 60
						margin_left = 5
						align = left
					}

					expand = {
						margin_bottom = 30
					}
				}
			}

			vbox_emblem_basic_edit = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}
		}

		vbox = {
			name = "detail_emblem_instances"
			visible = "[VariableSystem.Exists('coa_designer_emblem_detail_mode')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = Animation_Tab_Switch

			vbox = {
				name = "detail_emblem_list"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				visible = "[LessThan_int32( CoatOfArmsDesignerEmblemInstancesPanel.GetDetailEditIndex, '(int32)0' )]"

				hbox = {
					button_standard = {
						onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.AddEmblemInstance]"
						size = { 475 30 }

						button_icon_highlight = {

							block "highlight_icon_size"
							{
								size = { 25 25 }
							}

							parentanchor = center
							texture = "gfx/interface/icons/flat_icons/plus.dds"
						}

						tooltip = "COA_DESIGNER_DETAIL_ADD_INSTANCE_TT"
					}
				}

				vbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					margin_top = 10

					background = {
						using = Background_Area
						margin_top = -10
					}

					scrollbox = {
						name = "emblem_instances_scrollbox"

						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_background" {}
						blockoverride "scrollbox_margins"
						{
							margin = { 5 5 }
						}

						blockoverride "scrollbox_content"
						{
							vbox = {
								layoutpolicy_horizontal = expanding

								datamodel = "[CoatOfArmsDesignerEmblemInstancesPanel.GetAllEmblemInstances]"

								item = {
									widget_coa_emblem_detail_instance = {}
								}
							}
						}
					}
				}

				hbox = {
					margin_top = 15

					button_standard_back = {
						text = "BACK_LABEL"
						onclick = "[VariableSystem.Toggle('coa_designer_emblem_detail_mode')]"
					}
				}
			}

			vbox = {
				name = "detail_edit_scrollbars"
				visible = "[GreaterThanOrEqualTo_int32( CoatOfArmsDesignerEmblemInstancesPanel.GetDetailEditIndex, '(int32)0' )]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 1

				using = Animation_Tab_Switch

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }

					background = {
						using = Background_Area_Dark
						alpha = 0.8
						margin = { 0 5 }

						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_horizontal.dds"
							blend_mode = alphamultiply
							mirror = horizontal
						}
					}

					button_back = {
						name = "back_to_detail_edit"
						size = { 25 25 }
						onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.ClearDetailEdit]"

						tooltip = "COA_DESIGNER_DETAIL_EDIT_BACK_TT"
						using = tooltip_ws
					}

					coa_preview_icon = {
						datacontext = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailEditCoAPreview.GetCoA]"
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					margin_top = 10

					hbox_scrollbar_coa_label = {
						name = "scrollbar_position_axis_x"

						blockoverride "label"
						{
							text = "COA_DESIGNER_POSITION_X"
						}

						blockoverride "coa_scrollbar_values"
						{
							onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailPositionAxisX( PdxGuiWidget.Self )]"
							onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailPositionAxisX( PdxGuiWidget.Self )]"
							value = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailPositionAxisX]"
						}
					}

					hbox_scrollbar_coa_label = {
						name = "scrollbar_position_axis_y"

						blockoverride "label"
						{
							text = "COA_DESIGNER_POSITION_Y"
						}

						blockoverride "coa_scrollbar_values"
						{
							onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailPositionAxisY( PdxGuiWidget.Self )]"
							onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailPositionAxisY( PdxGuiWidget.Self )]"
							value = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailPositionAxisY]"
						}
					}

					vbox = {
						name = "detail_scale_scrollbars"
						layoutpolicy_horizontal = expanding
						spacing = 7

						hbox_scrollbar_coa_label = {
							name = "scrollbar_scale_axis_x"
							visible = "[Not( CoatOfArmsDesignerEmblemInstancesPanel.ShouldMatchEmblemDetailScale )]"
							layoutpolicy_horizontal = expanding

							blockoverride "label"
							{
								text = "COA_DESIGNER_SCALE_X"
							}

							blockoverride "coa_scrollbar_values"
							{
								onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailScaleAxisX( PdxGuiWidget.Self )]"
								onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailScaleAxisX( PdxGuiWidget.Self )]"
								value = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailScaleAxisX]"
							}
						}

						hbox_scrollbar_coa_label = {
							name = "scrollbar_scale_axis_y"
							visible = "[Not( CoatOfArmsDesignerEmblemInstancesPanel.ShouldMatchEmblemDetailScale )]"

							blockoverride "label"
							{
								text = "COA_DESIGNER_SCALE_Y"
							}

							blockoverride "coa_scrollbar_values"
							{
								onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailScaleAxisY( PdxGuiWidget.Self )]"
								onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailScaleAxisY( PdxGuiWidget.Self )]"
								value = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailScaleAxisY]"
							}
						}

						hbox_scrollbar_coa_label = {
							name = "scrollbar_scale_combined"
							visible = "[CoatOfArmsDesignerEmblemInstancesPanel.ShouldMatchEmblemDetailScale]"

							blockoverride "label"
							{
								text = "COA_DESIGNER_SCALE_COMBINED"
							}

							blockoverride "coa_scrollbar_values"
							{
								onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailScaleCombined( PdxGuiWidget.Self )]"
								onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailScaleCombined( PdxGuiWidget.Self )]"
								value = "[CoatOfArmsDesignerEmblemInstancesPanel.GetDetailScaleAxisX]"
							}
						}
					}

					hbox_scrollbar_coa_label = {
						name = "scrollbar_rotation"
						blockoverride "label"
						{
							text = "COA_DESIGNER_ROTATION"
						}
						blockoverride "coa_scrollbar_steps"
						{
							min = 0
							max = 360
							step = 1
						}
						blockoverride "coa_scrollbar_values"
						{
							onvaluechanged = "[CoatOfArmsDesignerEmblemInstancesPanel.EditDetailRotation( PdxGuiWidget.Self )]"
							onchangefinish = "[CoatOfArmsDesignerEmblemInstancesPanel.FinishEditDetailRotation( PdxGuiWidget.Self )]"
							value = "[IntToFloat( CoatOfArmsDesignerEmblemInstancesPanel.GetDetailRotation )]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						button_checkbox_label = {
							name = "toggle_flip_emblem_x_axis"
							tooltip = "COA_DESIGNER_FLIP_EMBLEM_X_AXIS_TT"
							size = { 25 25 }
							using = tooltip_se

							onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.ToggleFlipEmblemXAxisDetail]"

							blockoverride "checkbox"
							{
								checked = "[CoatOfArmsDesignerEmblemInstancesPanel.ShouldFlipEmblemXAxisDetail]"
							}

							blockoverride "text"
							{
								text = "COA_DESIGNER_FLIP_EMBLEM_X_AXIS_CHECKBOX_LABEL"
								max_width = 120
							}
						}

						button_checkbox_label = {
							name = "toggle_flip_emblem_y_axis"
							tooltip = "COA_DESIGNER_FLIP_EMBLEM_Y_AXIS_TT"
							size = { 25 25 }
							using = tooltip_se

							onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.ToggleFlipEmblemYAxisDetail]"

							blockoverride "checkbox"
							{
								checked = "[CoatOfArmsDesignerEmblemInstancesPanel.ShouldFlipEmblemYAxisDetail]"
							}

							blockoverride "text"
							{
								text = "COA_DESIGNER_FLIP_EMBLEM_Y_AXIS_CHECKBOX_LABEL"
								max_width = 120

							}
						}

						button_checkbox_label = {
							name = "toggle_match_scale"
							tooltip = "COA_DESIGNER_SCALE_COMBINED_TOGGLE_TT"
							size = { 25 25 }
							using = tooltip_se

							onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.ToggleMatchEmblemDetailScale]"

							blockoverride "checkbox"
							{
								checked = "[CoatOfArmsDesignerEmblemInstancesPanel.ShouldMatchEmblemDetailScale]"
							}

							blockoverride "text"
							{
								text = "COA_DESIGNER_SCALE_COMBINED_CHECKBOX_LABEL"
								max_width = 120
							}
						}
						expand = {}
					}
				}

				vbox_emblem_basic_edit = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				}
			}
		}

		expand = {}
	}

	type vbox_emblem_basic_edit = vbox
	{
		vbox = {
			visible = "[GreaterThan_int32( CoatOfArmsDesignerEmblemInstancesPanel.GetMaxNumColorsForSelected, '(int32)0' )]"
			layoutpolicy_horizontal = expanding
			margin_top = 10

			using = Animation_Tab_Switch

			divider_light = {
				layoutpolicy_horizontal = expanding
			}

			hbox = {
				name = "color_button_tabs"
				layoutpolicy_horizontal = expanding

				spacing = 5
				margin = { 5 10 }

				button_standard = {
					name = "COA_DESIGNER_EMBLEM_INSTANCES_PANEL_HEADER"
					size = { 100 52 }

					text_single = {
						text = "COA_DESIGNER_EMBLEM_INSTANCES_PANEL_HEADER"
						align = center|nobaseline
						parentanchor = center
					}

					onclick = "[VariableSystem.Clear('coa_designer_emblem_color')]"
					down = "[Not( VariableSystem.Exists('coa_designer_emblem_color') )]"
				}

				button_color_selection_tab = {
					name = "color1_button"
					visible = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorForNumberUsed( '(int32)1' )]"

					onclick = "[VariableSystem.SetOrToggle('coa_designer_emblem_color', '1')]"
					down = "[VariableSystem.HasValue('coa_designer_emblem_color', '1')]"
					tooltip = COA_DESIGNER_COLOR1

					blockoverride "button_color"
					{
						tintcolor = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)1' )]"
					}
				}

				button_color_selection_tab = {
					name = "color2_button"
					visible = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorForNumberUsed( '(int32)2' )]"

					onclick = "[VariableSystem.SetOrToggle('coa_designer_emblem_color', '2')]"
					down = "[VariableSystem.HasValue('coa_designer_emblem_color', '2')]"
					tooltip = COA_DESIGNER_COLOR2

					blockoverride "button_color"
					{
						tintcolor = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)2' )]"
					}
				}

				button_color_selection_tab = {
					name = "color3_button"
					visible = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorForNumberUsed( '(int32)3' )]"

					onclick = "[VariableSystem.SetOrToggle('coa_designer_emblem_color', '3')]"
					down = "[VariableSystem.HasValue('coa_designer_emblem_color', '3')]"
					tooltip = COA_DESIGNER_COLOR3

					blockoverride "button_color"
					{
						tintcolor = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)3' )]"
					}
				}

				expand = {}
			}
		}

		vbox = {
			visible = "[VariableSystem.Exists('coa_designer_emblem_color')]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_background" {}

				blockoverride "scrollbox_background_fade" {}

				blockoverride "scrollbox_margins" {
					margin = { 0 5 }
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						name = "color_selections"
						layoutpolicy_horizontal = expanding
						spacing = 4
						margin_top = 15

						using = Animation_Tab_Switch

						vbox_coa_designer_color_selection = {
							name = "color1_selection"
							visible = "[VariableSystem.HasValue('coa_designer_emblem_color', '1')]"
							layoutpolicy_horizontal = expanding

							blockoverride "coa_color_picker"
							{
								color = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)1' )]"
								oncoloredited = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectColor( '(int32)1' )]"
								oneditingfinished = "[CoatOfArmsDesignerEmblemInstancesPanel.OnFinishColor( '(int32)1' )]"
							}
							blockoverride "palette_item_button"
							{
								down = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorSelected( '(int32)1', CoatOfArmsDesignerPaletteColor.GetValue )]"
								onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectPaletteColor( '(int32)1', CoatOfArmsDesignerPaletteColor.Self )]"
							}
						}

						vbox_coa_designer_color_selection = {
							name = "color2_selection"
							visible = "[VariableSystem.HasValue('coa_designer_emblem_color', '2')]"
							layoutpolicy_horizontal = expanding

							blockoverride "coa_color_picker"
							{
								color = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)2' )]"
								oncoloredited = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectColor( '(int32)2' )]"
								oneditingfinished = "[CoatOfArmsDesignerEmblemInstancesPanel.OnFinishColor( '(int32)2' )]"
							}
							blockoverride "palette_item_button"
							{
								down = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorSelected( '(int32)2', CoatOfArmsDesignerPaletteColor.GetValue )]"
								onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectPaletteColor( '(int32)2', CoatOfArmsDesignerPaletteColor.Self )]"
							}
						}

						vbox_coa_designer_color_selection = {
							name = "color3_selection"
							visible = "[VariableSystem.HasValue('coa_designer_emblem_color', '3')]"
							layoutpolicy_horizontal = expanding

							blockoverride "coa_color_picker"
							{
								color = "[CoatOfArmsDesignerEmblemInstancesPanel.GetColor( '(int32)3' )]"
								oncoloredited = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectColor( '(int32)3' )]"
								oneditingfinished = "[CoatOfArmsDesignerEmblemInstancesPanel.OnFinishColor( '(int32)3' )]"
							}
							blockoverride "palette_item_button"
							{
								down = "[CoatOfArmsDesignerEmblemInstancesPanel.IsColorSelected( '(int32)3', CoatOfArmsDesignerPaletteColor.GetValue )]"
								onclick = "[CoatOfArmsDesignerEmblemInstancesPanel.OnSelectPaletteColor( '(int32)3', CoatOfArmsDesignerPaletteColor.Self )]"
							}
						}
					}
				}
			}
		}

		vbox = {
			name = "emblem_textures"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 2

			visible = "[Not( VariableSystem.Exists('coa_designer_emblem_color') )]"

			state = {
				name = _show
				on_start = "[CoatOfArmsDesignerEmblemInstancesPanel.UpdateTexturePreviewColors]"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				dropdown_menu_standard = {
					name = "emblem_texture_categories"

					blockoverride "dropdown_properties"
					{
						datamodel = "[GetCoatOfArmsDesignerEmblemTextureCategories]"

						onselectionchanged = "[CoatOfArmsDesignerEmblemInstancesPanel.SelectEmblemTextureCategory]"
						selectedindex = "[CoatOfArmsDesignerEmblemInstancesPanel.GetSelectedEmblemTextureCategoryIndex]"
					}

					blockoverride "dropdown_active_item_properties"
					{
						text = "[Localize( Concatenate( 'COA_DESIGNER_CATEGORY_', CString.GetString ) )]"
					}

					blockoverride "dropdown_item_properties"
					{
						text = "[Localize( Concatenate( 'COA_DESIGNER_CATEGORY_', CString.GetString ) )]"
					}
				}

				expand = {}
			}

			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				scrollbox = {
					name = "emblem_textures_scrollbox"

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_background" {}

					blockoverride "scrollbox_margins"
					{
						margin = { 5 5 }
					}

					blockoverride "scrollbox_content"
					{
						fixedgridbox = {
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							datamodel = "[CoatOfArmsDesignerEmblemInstancesPanel.GetEmblemTextures]"
							addcolumn = 92
							addrow = 92
							flipdirection = yes
							datamodel_wrap = 5

							item = {
								widget_coa_emblem_texture = {}
							}
						}
					}
				}
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemInstance datacontext
	type widget_coa_emblem_instance = widget
	{
		size = { 66 66 }

		coa_preview_icon = {
			datacontext = "[CoatOfArmsDesignerEmblemInstance.GetPreviewCoA.GetCoA]"
			parentanchor = center

			blockoverride "coa_preview_size"
			{
				size = { 58 58 }
			}
		}

		button_standard_clean = {
			parentanchor = center
			size = { 62 62 }

			down = "[CoatOfArmsDesignerEmblemInstance.IsSelected]"
			downframe = 5
			downhoverframe = 5
			downpressedframe = 5

			blockoverride "button_standard_mouseover"
			{
				visible = "[Not( CoatOfArmsDesignerEmblemInstance.IsSelected )]"
			}

			click_modifiers = {
				ondefault = "[CoatOfArmsDesignerEmblemInstance.OnSelect]"
				onshift = "[CoatOfArmsDesignerEmblemInstance.OnSelectMulti]"
			}

			tooltip = "COA_DESIGNER_EMBLEM_INSTANCE_SELECTION_TT"
			using = tooltip_ne

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemInstance datacontext
	type widget_coa_emblem_detail_instance = widget
	{
		size = { 475 112 }

		widget = {
			size = { 465 108 }
			position = { 2 2 }

			background = {
				using = Background_Area_Dark
				alpha = 0.7
			}

			drag_drop_coat_of_arms_icon = {
				datacontext = "[CoatOfArmsDesignerEmblemInstance.GetPreviewCoA.GetCoA]"
				parentanchor = left|vcenter
				position = { 15 0 }

				tooltip = "COA_DESIGNER_DETAIL_INSTANCE_ICON_TT"
				using = tooltip_ws

				using = coa_preview_icon_data

				drag_drop_id = "coa_designer_emblem_entry"
				drag_drop_args = "[CoatOfArmsDesignerEmblemInstance.GetIndexString]"
			}

			coa_emblem_instance_layer_drop_target = {
				drag_drop_id = "coa_designer_emblem_layer_destination_top"
				parentanchor = top
			}

			coa_emblem_instance_layer_drop_target = {
				drag_drop_id = "coa_designer_emblem_layer_destination_bottom"
				parentanchor = bottom
			}

			button_edit_text = {
				parentanchor = vcenter|right
				size = { 30 30 }
				position = { -15 0 }

				button_ignore = none
				down = "[CoatOfArmsDesignerEmblemInstance.IsSelected]"

				onclick = "[CoatOfArmsDesignerEmblemInstance.OnSelectForDetailEdit]"
				onrightclick = "[CoatOfArmsDesignerEmblemInstancesPanel.RemoveEmblemInstance( CoatOfArmsDesignerEmblemInstance.AccessSelf )]"

				tooltip = "COA_DESIGNER_DETAIL_INSTANCE_TT"
			}
		}
	}

	type coa_emblem_instance_layer_drop_target = drag_drop_target
	{
		drag_drop_args = "[CoatOfArmsDesignerEmblemInstance.GetIndexString]"

		tooltip = COA_DESIGNER_DETAIL_INSTANCE_ICON_TARGET_TT
		using = tooltip_ws

		size = { 100% 10 }

		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/colors/gold_darker.dds"

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				blend_mode = alphamultiply
			}
		}
	}

	# Requires CoatOfArmsDesignerEmblemTexture datacontext
	type widget_coa_emblem_texture = widget
	{
		size = { 92 92 }

		coa_preview_icon = {
			datacontext = "[CoatOfArmsDesignerEmblemTexture.GetPreviewCoA.GetCoA]"
			parentanchor = center
			size = { 84 84 }
		}

		button_standard_clean = {
			parentanchor = center
			size = { 88 88 }

			down = "[CoatOfArmsDesignerEmblemTexture.IsSelected]"
			onclick = "[CoatOfArmsDesignerEmblemTexture.OnSelect]"
			downframe = 5
			downhoverframe = 5
			downpressedframe = 5

			blockoverride "button_standard_mouseover"
			{
				visible = "[Not( CoatOfArmsDesignerEmblemTexture.IsSelected )]"
			}

			tooltip = "[CoatOfArmsDesignerEmblemTexture.GetName]"
			tooltip_visible = "[InDebugMode]"

			background = {
				texture = "gfx/interface/component_tiles/tile_vignette_3px.dds"
				spriteType = Corneredtiled
				spriteborder = { 5 5 }
				margin = { -2 -2 }
			}
		}
	}

	type button_color_selection_tab = button_standard_clean
	{
		size = { 52 52 }
		using = tooltip_ne

		icon = {
			parentanchor = left|vcenter
			position = { 6 0 }
			size = { 40 40 }

			texture = "gfx/interface/colors/white.dds"
			using = Mask_Rough_Edges
			block "button_color" {}
		}
	}

	type vbox_coa_designer_color_selection = vbox
	{
		spacing = 5

		vbox = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
				margin_top = 20
			}

			fixedgridbox = {
				addcolumn = 50
				addrow = 50
				datamodel_wrap = 7
				flipdirection = yes

				datamodel = "[CoatOfArmsDesigner.GetAllPaletteColors]"

				item = {

					button_standard_clean = {
						size = { 50 50 }

						block "palette_item_button" {}

						icon = {
							parentanchor = center
							size = { 44 44 }

							texture = "gfx/interface/colors/white.dds"
							tintcolor = "[CoatOfArmsDesignerPaletteColor.GetValue]"
							using = Mask_Rough_Edges

							tooltip = "[CoatOfArmsDesignerPaletteColor.GetName]"
							tooltip_visible = "[InDebugMode]"
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 15
				margin_right = 30
				margin_left = 30

				divider_light = {
					layoutpolicy_horizontal = expanding
				}
			}

			text_multi = {
				autoresize = yes
				max_width = 410
				margin_top = 10
				margin_bottom = 20
				default_format = "#weak"
				text = "COA_DESIGNER_COLORS_DESCRIPTION"
			}
		}

		vbox_expanded_color_picker = {
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
			}
		}
	}

	type vbox_expanded_color_picker = vbox {
		vbox = {
			name = "expand_colorpicker"
			layoutpolicy_horizontal = expanding

			hbox_colorpicker_header_button = {
				layoutpolicy_horizontal = expanding

				blockoverride "onclick"
				{
					onclick = "[GetVariableSystem.Toggle( 'expand_coa_color_picker' )]"
				}

				blockoverride "button_expand"
				{
					frame = "[Select_int32(GetVariableSystem.Exists( 'expand_coa_color_picker'), '(int32)2', '(int32)1')]"
				}

				blockoverride "text"
				{
					text = "COA_DESIGNER_COLOR_PICKER_EXPAND_HEADER"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				visible = "[GetVariableSystem.Exists( 'expand_coa_color_picker' )]"

				using = Animation_Tab_Switch

				vbox = {
					layoutpolicy_horizontal = expanding

					using = Animation_Tab_Switch

					colorpicker_simple = {
						block "coa_color_picker" {}
					}
				}
			}
		}
	}

	type hbox_colorpicker_header_button = hbox {
		margin = { 10 5 }

		background = {
			using = Background_Area_Dark
			alpha = 0.5
		}

		button_normal = {
			layoutpolicy_horizontal = expanding
			size = { 0 25 }

			block "onclick" {}

			hbox = {
				ignoreinvisible = yes
				spacing = 5

				button_expand = {
					block "button_expand" {}
					block "onclick" {}
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					align = nobaseline
					alwaystransparent = yes

					block "text" {}
				}
			}
		}
	}

	type hbox_scrollbar_coa_label = hbox
	{
		layoutpolicy_horizontal = expanding

		text_single = {
			name = "coa_scrollbar_label"
			block "label"
			{
				raw_text = "#D REPLACE ME#!"
			}
		}

		expand = {}

		scrollbar_value_slider = {
			block "coa_scrollbar_steps"
			{
				min = 0
				max = 1
				step = 0.01
			}

			block "coa_scrollbar_values"
			{
			}
		}
	}

	type coa_preview_icon = coat_of_arms_icon
	{
		using = coa_preview_icon_data
	}
}

template coa_preview_icon_data
{
	coat_of_arms = "[CoatOfArms.GetTexture('(int32)80','(int32)80')]"
	coat_of_arms_slot = "[CoatOfArms.GetSlot('(int32)80','(int32)80')]"
	coat_of_arms_mask = "gfx/interface/coat_of_arms/designer_mask.dds"

	block "coa_preview_size"
	{
		size = { 80 80 }
	}
}

template CoatOfArmsDesignerAnimationResetState
{
	on_start = "[GetVariableSystem.Set( 'coa_designer_page', 'start' )]"

	on_start = "[GetVariableSystem.Clear('coa_designer_background_color')]"
	on_start = "[GetVariableSystem.Clear('coa_designer_emblem_color')]"
	on_start = "[GetVariableSystem.Clear('coa_designer_emblem_detail_mode')]"
}

template CoatOfArmsDesignerClearEditState
{
	onclick = "[VariableSystem.Clear('coa_designer_background_color')]"
	onclick = "[VariableSystem.Clear('coa_designer_emblem_color')]"
	onclick = "[VariableSystem.Clear('coa_designer_emblem_detail_mode')]"
	onclick = "[CoatOfArmsDesigner.GetEmblemInstancesPanel.ClearDetailEdit]"
}
